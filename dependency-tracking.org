#+TITLE: Dependency Tracking

First, we define a directed graph of dependencies:

#+NAME: Dependency Graph
#+BEGIN_SRC dot :file dependency-graph.png
  digraph {
    rankdir = LR;
    A -> B;
    B -> C;
    C -> D;
    D -> E;
    D -> F;
    C -> F;
  }
#+END_SRC

#+RESULTS: Dependency Graph
[[file:dependency-graph.png]]

The dependency relationships can be captured in a table, enumerating the shortest path (distance ~d~) between any two nodes ~f~ and ~t~. A ~direct dependency~ is defined as one of distance ~d = 1~, while a ~transitive dependency~ is defined as one of distance ~d > 1~. Note that in general there may multiple paths from ~f~ to ~t~ resulting in a transitive dependency; we are only interested in capturing the one with the shortest distance. 

#+NAME: Dependency Table
| f | t | d |
|---+---+---|
| A | B | 1 |
| B | C | 1 |
| A | C | 2 |
| C | D | 1 |
| B | D | 2 |
| A | D | 3 |
| D | E | 1 |
| C | E | 2 |
| B | E | 3 |
| A | E | 4 |
| D | F | 1 |
| C | F | 1 |
| B | F | 3 |
| A | F | 4 |


